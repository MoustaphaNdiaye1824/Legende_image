# -*- coding: utf-8 -*-
"""Scrit_miniprojet2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NO7Q7RR25_a2InohT2OBIj5PlRiHx4yx

# Importation des données
"""

#mount your drive
from google.colab import drive
drive.mount('drive')

#!ls drive/My\ Drive
import os

########## CHEMINS CI DESSOUS A MODIFIER ############
path_to_ptm = 'drive/My Drive/DS/Mini_projet_2'
###################################################
os.chdir(path_to_ptm)

import os 
PATH_to_para ="data/Texte"
para_files = []
j = 0
for i in range(1,78):
  j = j  +1
  if j == 57:
    j = 75
#para = csv.reader('Texte en paragraphes')
  nbfile = str(j) +".txt"
  file = os.path.join(PATH_to_para,nbfile)
  para_files.append(file)

import pandas as pd
data_para = []
docs = []
for i,file in enumerate(para_files):
  data_para.append(open(file, "r"))
  docs.append(data_para[i].read())

docs[0]

"""# Importation des libraries"""

!pip install pyLDAvis

# Commented out IPython magic to ensure Python compatibility.
import re
import numpy as np
import pandas as pd
from pprint import pprint

# Gensim
import gensim
import gensim.corpora as corpora
from gensim.utils import simple_preprocess
from gensim.models import CoherenceModel

# spacy for lemmatization
import spacy

# Plotting tools
import pyLDAvis
import pyLDAvis.gensim 
import matplotlib.pyplot as plt
# %matplotlib inline

# Enable logging for gensim - optional
import logging
logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.ERROR)

import warnings
warnings.filterwarnings("ignore",category=DeprecationWarning)

"""# Préparer les mots vides"""

import nltk
nltk.download('stopwords')

from nltk.corpus import stopwords
stop_words = stopwords.words('english')
stop_words.extend(['from', 'subject', 're', 'edu', 'use'])

"""# Néttoyage des données
Suppression des emails et des caractères de nouvelles lignes
"""

# Remove Emails
docs = [re.sub('\S*@\S*\s?', '', sent) for sent in docs]

# Remove new line characters
docs = [re.sub('\s+', ' ', sent) for sent in docs]

# Remove distracting single quotes
docs = [re.sub("\'", "", sent) for sent in docs]

pprint(docs[:1])

x= docs[0]
x

"""# Essayer de supprimer les mots non anglais"""

import nltk
nltk.download('words')
words = set(nltk.corpus.words.words())

#x = ["Io andiamo to the beach with my amico.", "Je suis the man", "je suis"]
#for i in range(len(x)):
doc = " ".join(w for w in nltk.wordpunct_tokenize(x) if w.lower() in words or not w.isalpha())

doc

"""!!!!!!!!! ça ne marche pas comme prévu

# Tokenisation
Décomposer chaque phrase en une liste de mots
"""

def sent_to_words(sentences):
    for sentence in sentences:
        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))  # deacc=True removes punctuations

docs_words = list(sent_to_words(docs))

print(docs_words[:1])

"""# Création de modèles Bigram
Les bigrammes sont deux mots qui apparaissent fréquemment ensemble dans le document.
"""

# Build the bigram models
bigram = gensim.models.Phrases(print(docs_words[:1])
, min_count=5, threshold=100) # higher threshold fewer phrases.


# Faster way to get a sentence clubbed as a bigram
bigram_mod = gensim.models.phrases.Phraser(bigram)

# See bigram example
print(bigram_mod[docs_words[0]])

"""# Supprimer les mots vides, créer des bigrammes et lemmatiser

"""

# Define functions for stopwords, bigrams and lemmatization
def remove_stopwords(texts):
    return [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in texts]

def make_bigrams(texts):
    return [bigram_mod[doc] for doc in texts]



def lemmatization(texts, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV']):
    """https://spacy.io/api/annotation"""
    texts_out = []
    for sent in texts:
        doc = nlp(" ".join(sent)) 
        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])
    return texts_out

"""Appelons les fonctions définies ci-dessus"""

# Remove Stop Words
docs_words_nostops = remove_stopwords(docs_words)

# Form Bigrams
docs_words_bigrams = make_bigrams(docs_words_nostops)

# Initialize spacy 'en' model, keeping only tagger component (for efficiency)
# python3 -m spacy download en
nlp = spacy.load('en', disable=['parser', 'ner'])

# Do lemmatization keeping only noun, adj, vb, adv
data_lemmatized = lemmatization(docs_words_bigrams, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV'])

print(data_lemmatized[:1])

"""# Créez le dictionnaire et le corpus nécessaires à la modélisation de sujets"""

# Create Dictionary
id2word = corpora.Dictionary(data_lemmatized)

# Create Corpus
texts = data_lemmatized

# Term Document Frequency
corpus = [id2word.doc2bow(text) for text in texts]

# View
print(corpus[:1])

"""Gensim crée un identifiant unique pour chaque mot du document. Le corpus produit illustré ci-dessus est un mappage de (word_id, word_frequency).

Par exemple, (0, 1) ci-dessus implique, le mot id 0 apparaît une fois dans le premier document. De même, le mot id 1 apparaît une fois et ainsi de suite.

Le mots à l'indice 0 est:
"""

id2word[0]

# Apercu de quelques mots et de leur fréquence
[[(id2word[id], freq) for id, freq in cp] for cp in corpus[:1]]

"""# Construction du modèle LDA avec gensim"""

# Build LDA model
lda_model = gensim.models.ldamodel.LdaModel(corpus=corpus,
                                           id2word=id2word,
                                           num_topics=20, 
                                           random_state=100,
                                           update_every=1,
                                           chunksize=100,
                                           passes=10,
                                           alpha='auto',
                                           per_word_topics=True)

"""# Afficher les 10 mots les plus importants pour chaque sujet"""

# Print the Keyword in the 10 topics
pprint(lda_model.print_topics())
doc_lda = lda_model[corpus]

"""# Calculer le score de perplexité et de cohérence du modèle
La perplexité du modèle et la cohérence du sujet constituent une mesure pratique pour juger de la qualité d'un modèle de sujet donné.
"""

# Compute Perplexity
print('\nPerplexity: ', lda_model.log_perplexity(corpus))  # a measure of how good the model is. lower the better.

# Compute Coherence Score
coherence_model_lda = CoherenceModel(model=lda_model, texts=data_lemmatized, dictionary=id2word, coherence='c_v')
coherence_lda = coherence_model_lda.get_coherence()
print('\nCoherence Score: ', coherence_lda)

"""# Visualisez les sujets"""

# Visualize the topics
pyLDAvis.enable_notebook()
vis = pyLDAvis.gensim.prepare(lda_model, corpus, id2word)
vis

"""Chaque bulle sur le graphique de gauche représente un sujet. Plus la bulle est grande, plus ce sujet est répandu.

Un bon modèle de sujet aura des bulles assez grandes et non superposées dispersées dans le graphique au lieu d'être regroupées dans un quadrant.

Si vous déplacez le curseur sur l'une des bulles, les mots et les barres sur le côté droit seront mis à jour. Ces mots sont les principaux mots-clés qui forment le sujet sélectionné.

# Trouver le nombre optimal de sujets
Choisir un modèle qui a une cohérence plus élévé
"""

def compute_coherence_values(dictionary, corpus, texts, limit, start=2, step=3):
    """
    Compute c_v coherence for various number of topics

    Parameters:
    ----------
    dictionary : Gensim dictionary
    corpus : Gensim corpus
    texts : List of input texts
    limit : Max num of topics

    Returns:
    -------
    model_list : List of LDA topic models
    coherence_values : Coherence values corresponding to the LDA model with respective number of topics
    """
    coherence_values = []
    model_list = []
    for num_topics in range(start, limit, step):
        model = gensim.models.ldamodel.LdaModel(corpus=corpus,
                                           id2word=id2word,
                                           num_topics= num_topics, 
                                           random_state=100,
                                           update_every=1,
                                           chunksize=100,
                                           passes=10,
                                           alpha='auto',
                                           per_word_topics=True)
        model_list.append(model)
        coherencemodel = CoherenceModel(model=model, texts=texts, dictionary=dictionary, coherence='c_v')
        coherence_values.append(coherencemodel.get_coherence())

    return model_list, coherence_values

# Can take a long time to run.
model_list, coherence_values = compute_coherence_values(dictionary=id2word, corpus=corpus, texts=data_lemmatized, start=2, limit=40, step=6)

# Show graph
limit=40; start=2; step=6;
x = range(start, limit, step)
plt.plot(x, coherence_values)
plt.xlabel("Num Topics")
plt.ylabel("Coherence score")
plt.legend(("coherence_values"), loc='best')
plt.show()

# Print the coherence scores
for m, cv in zip(x, coherence_values):
    print("Num Topics =", m, " has Coherence Value of", round(cv, 4))

# Select the model and print the topics
optimal_model = model_list[3]
model_topics = optimal_model.show_topics(formatted=False)
pprint(optimal_model.print_topics(num_words=10))

"""# Predictions"""

!pip install docx2txt

import docx2txt

# replace following line with location of your .docx file
MY_TEXT = docx2txt.process("data/desc_OK.docx")


with open("data/desc_OK2.txt", "w") as text_file:
    print(MY_TEXT, file=text_file)

import string

# load doc into memory
def load_doc(filename):
	# open the file as read only
	file = open(filename, 'r')
	# read all text
	text = file.read()
	# close the file
	file.close()
	return text

# extract descriptions for images
def load_descriptions(doc):
  mapping = dict()
	# process lines
  for line in doc.split('\n\n'):
		# split line by white space
    tokens = line.split()
    if len(line) < 2:
      continue
    if line.split()[0] == '#PAR#':
      break
    #if line.split()[0][0:2] !='72':
		# take the first token as the image id, the rest as the description
    image_id, image_desc = tokens[0], tokens[1:]

		# convert description tokens back to string
    image_desc = ' '.join(image_desc)
		# create the list if needed
    if image_id not in mapping :
      mapping[image_id] = list()
		# store description
    mapping[image_id].append(image_desc)
  return mapping

def clean_descriptions(descriptions):
	# prepare translation table for removing punctuation
	table = str.maketrans('', '', string.punctuation)
	for key, desc_list in descriptions.items():
		for i in range(len(desc_list)):
			desc = desc_list[i]
			# tokenize
			desc = desc.split()
			# convert to lower case
			desc = [word.lower() for word in desc]
			# remove punctuation from each token
			desc = [w.translate(table) for w in desc]
			# remove hanging 's' and 'a'
			desc = [word for word in desc if len(word)>1]
			# remove tokens with numbers in them
			desc = [word for word in desc if word.isalpha()]
			# store as string
			desc_list[i] =  ' '.join(desc)

# convert the loaded descriptions into a vocabulary of words
def to_vocabulary(descriptions):
	# build a list of all description strings
	all_desc = set()
	for key in descriptions.keys():
		[all_desc.update(d.split()) for d in descriptions[key]]
	return all_desc

# save descriptions to file, one per line
def save_descriptions(descriptions, filename):
	lines = list()
	for key, desc_list in descriptions.items():
		for desc in desc_list:
			lines.append(key + ' ' + desc)
	data = '\n'.join(lines)
	file = open(filename, 'w')
	file.write(data)
	file.close()

filename = "./desc_OK2.txt"
# load descriptions
doc = load_doc(filename)
# parse descriptions
descriptions = load_descriptions(doc)
print('Loaded: %d ' % len(descriptions))
# clean descriptions
clean_descriptions(descriptions)
# summarize vocabulary
vocabulary = to_vocabulary(descriptions)
print('Vocabulary Size: %d' % len(vocabulary))
# save to file
save_descriptions(descriptions, 'descriptions.txt')

from pickle import load

# load doc into memory
def load_doc(filename):
	# open the file as read only
	file = open(filename, 'r')
	# read all text
	text = file.read()
	# close the file
	file.close()
	return text

# load a pre-defined list of photo identifiers
def load_set(filename):
  doc = load_doc(filename)
  dataset = list()
	# process line by line
  for line in doc.split('\n\n'):
		# skip empty lines
    if len(line) < 1:
      continue
		# get the image identifier
    if line.split()[0] == '#PAR#':
      break
    #if line.split()[0][0:2] !='72':
    identifier = line.split()[0]
    dataset.append(identifier)
  return set(dataset)

# load clean descriptions into memory
def load_clean_descriptions(filename, dataset):
	# load document
  doc = load_doc(filename)
  descriptions = dict()
  descriptions_list = []
  for line in doc.split('\n'):
		# split line by white space
    tokens = line.split()
    # split id from description
    image_id, image_desc = tokens[0], tokens[1:]
    # skip images not in the set

    if image_id in dataset:
			# create list
      if image_id not in descriptions:
        descriptions[image_id] = list()
			# wrap description in tokens
      desc = 'startseq ' + ' '.join(image_desc) + ' endseq'
			# store
      descriptions[image_id].append(desc)
      descriptions_list.append(desc)
  return descriptions

# load photo features
def load_photo_features(filename, dataset):
	# load all features
	all_features = load(open(filename, 'rb'))
	# filter features
	features = {k: all_features[k] for k in dataset}
	return features

# load training dataset (6K)
filename = 'data/desc_OK.txt'
train = load_set(filename)
print('Dataset: %d' % len(train))
# descriptions
train_descriptions = load_clean_descriptions('descriptions.txt', train)
train_descriptions_list = list(train_descriptions.values())
print('Descriptions: train=%d' % len(train_descriptions))
# photo features
#train_features = load_photo_features('features.pkl', train)
#print('Photos: train=%d' % len(train_features))

train_descriptions_list

# Remove Stop Words
docs_words_nostops = remove_stopwords(train_descriptions_list)

# Form Bigrams
docs_words_bigrams = make_bigrams(docs_words_nostops)

# Initialize spacy 'en' model, keeping only tagger component (for efficiency)
# python3 -m spacy download en
nlp = spacy.load('en', disable=['parser', 'ner'])

# Do lemmatization keeping only noun, adj, vb, adv
data_lemmatized = lemmatization(docs_words_bigrams, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV'])

print(data_lemmatized[:1])

train_descriptions_list = data_lemmatized

from tokenize import tokenize
corpus_test= [id2word.doc2bow(doc) for doc in train_descriptions_list]
predictions= lda_model[corpus_test]
topics = sorted(lda_model[corpus_test],
                key=lambda 
                x:x[1],
                reverse=True)

pprint(predictions.print_topics())

"""# Trouver le sujet dominant dans chaque document"""

def format_topics_sentences(ldamodel=lda_model, corpus=corpus, texts=docs):
    # Init output
    sent_topics_df = pd.DataFrame()

    # Get main topic in each document
    for i, row in enumerate(ldamodel[corpus]):
        row = sorted(row, key=lambda x: (x[1]), reverse=True)
        # Get the Dominant topic, Perc Contribution and Keywords for each document
        for j, (topic_num, prop_topic) in enumerate(row):
            if j == 0:  # => dominant topic
                wp = ldamodel.show_topic(topic_num)
                topic_keywords = ", ".join([word for word, prop in wp])
                sent_topics_df = sent_topics_df.append(pd.Series([int(topic_num), round(prop_topic,4), topic_keywords]), ignore_index=True)
            else:
                break
    sent_topics_df.columns = ['Dominant_Topic', 'Perc_Contribution', 'Topic_Keywords']

    # Add original text to the end of the output
    contents = pd.Series(texts)
    sent_topics_df = pd.concat([sent_topics_df, contents], axis=1)
    return(sent_topics_df)

df_topic_sents_keywords = format_topics_sentences(ldamodel=optimal_model, corpus=corpus, texts=docs)

# Format
df_dominant_topic = df_topic_sents_keywords.reset_index()
df_dominant_topic.columns = ['Document_No', 'Dominant_Topic', 'Topic_Perc_Contrib', 'Keywords', 'Text']

# Show
df_dominant_topic.head(10)

"""# Modèle kmeans"""

from sklearn import preprocessing, decomposition, model_selection, metrics, pipeline
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn.cluster import KMeans

#TF-IDF vectorizer
tfv = TfidfVectorizer(stop_words = stop_words, ngram_range = (1,1))
#transform
vec_text = tfv.fit_transform(docs)
#returns a list of words.
words = tfv.get_feature_names()

vec_text.shape

np.argsort(vec_text)

#setup kmeans clustering
kmeans = KMeans(n_clusters = 20, n_init = 17, n_jobs = -1, tol = 0.01, max_iter = 200)
#fit the data 
kmeans.fit(vec_text)
#this loop transforms the numbers back into words
common_words = kmeans.cluster_centers_.argsort()[:,-1:-11:-1]
for num, centroid in enumerate(common_words):
    print(str(num) + ' : ' + ', '.join(words[word] for word in centroid))

common_words

tfidf = TfidfVectorizer(
    min_df = 5,
    max_df = 0.95,
    max_features = 8000,
    stop_words = 'english'
)
tfidf.fit(docs)
text = tfidf.transform(docs)

from sklearn.cluster import MiniBatchKMeans

clusters = MiniBatchKMeans(n_clusters=20, init_size=1024, batch_size=2048, random_state=20).fit_predict(text)

def get_top_keywords(data, clusters, labels, n_terms):
    df = pd.DataFrame(data.todense()).groupby(clusters).mean()
    
    for i,r in df.iterrows():
        print('\nCluster {}'.format(i))
        print(','.join([labels[t] for t in np.argsort(r)[-n_terms:]]))
            
get_top_keywords(text, clusters, tfidf.get_feature_names(), 10)

"""# Modèle LSA"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
pd.set_option("display.max_colwidth", 200)

news_df = pd.DataFrame({'document':docs})

# removing everything except alphabets`
news_df['clean_doc'] = news_df['document'].str.replace("[^a-zA-Z#]", " ")

# removing short words
news_df['clean_doc'] = news_df['clean_doc'].apply(lambda x: ' '.join([w for w in x.split() if len(w)>3]))

# make all text lowercase
news_df['clean_doc'] = news_df['clean_doc'].apply(lambda x: x.lower())

import nltk
nltk.download('words')
words = set(nltk.corpus.words.words())

# removing no english words
news_df['clean_doc'] =  news_df['clean_doc'].apply(lambda x: " ".join(w for w in nltk.wordpunct_tokenize(x) if w.lower() in words or not w.isalpha()))

news_df['clean_doc'][0]

from nltk.corpus import stopwords
stop_words = stopwords.words('english')

# tokenization
tokenized_doc = news_df['clean_doc'].apply(lambda x: x.split())

# remove stop-words
tokenized_doc = tokenized_doc.apply(lambda x: [item for item in x if item not in stop_words])

# de-tokenization
detokenized_doc = []
for i in range(len(news_df)):
    t = ' '.join(tokenized_doc[i])
    detokenized_doc.append(t)

news_df['clean_doc'] = detokenized_doc

from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer = TfidfVectorizer(stop_words='english', max_features= 1000, # keep top 1000 terms 
                             max_df = 0.5, smooth_idf=True)

X = vectorizer.fit_transform(news_df['clean_doc'])

X.shape # check shape of the document-term matrix

from sklearn.decomposition import TruncatedSVD

# SVD represent documents and terms in vectors 
svd_model = TruncatedSVD(n_components=20, algorithm='randomized', n_iter=100, random_state=122)

svd_model.fit(X)

len(svd_model.components_)

!pip install mglearn

import mglearn

sorting = np.argsort(svd_model.components_, axis = 1)[:,::-1]
feature_names = np.array(vectorizer.get_feature_names())
mglearn.tools.print_topics(topics=range(20), feature_names = feature_names, sorting=sorting, topics_per_chunk=5, n_words=10)